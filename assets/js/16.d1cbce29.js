(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{231:function(t,n,e){"use strict";e.r(n);var s=e(0),a=Object(s.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[e("p",[t._v("react很早就有注意到，但是因为工作不用，所以一直也就是知道大概的用法，能写个demo的水平。\n所以，准备在接下一段时间系统的学习一下。今天先记录一下第一个demo的小知识点")]),t._v(" "),e("p",[t._v("先把代码贴上来，在分析知识点")]),t._v(" "),t._m(0),e("ol",[e("li",[t._v("... es6数组的扩展运算符,把数组或类数组对象展开成一系列用逗号隔开的值 (这个是深拷贝,和数组直接赋值不一样)")]),t._v(" "),e("li",[t._v("数组的map方法, 这个是es5的方法，这个一般都会用返回一个数组,经常用到的forEach、map、filter等。")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.css88.com/react/docs/fragments.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fragment"),e("OutboundLink")],1),t._v(" 片段,可以减少无用的标签(多余的)。")]),t._v(" "),e("li",[t._v("dangerouslySetInnerHTML 不转义html标签和vue里面的v-html一个作用")]),t._v(" "),e("li",[t._v("label, 点击label让后面的元素获取焦点,在react不是用for 而是用htmlFor")])]),t._v(" "),t._m(1),t._v(" "),e("p",[t._v("TodoList 组件")]),t._v(" "),t._m(2),e("p",[t._v("TodoItem组件的代码")]),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),e("p",[t._v("TodoList:")]),t._v(" "),t._m(6),t._m(7)])},[function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("import React ,{Component,Fragment} from 'react'\n\nclass TodoList extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      value: '',\n      lists: []\n    }\n  }\n\n  // 输入框改变触发的函数\n  handleValueChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  // 点击添加按钮\n  handleBtnClick = () => {\n    this.setState({\n      lists: [...this.state.lists, this.state.value],\n      value: ''\n    })\n  }\n\n  // 点击删除按钮\n  handleDeleteClick = (index) => {\n    let lists = [...this.state.lists]\n    lists.splice(index, 1)\n    this.setState({\n      lists\n    })\n  }\n\n  render () {\n     return (\n     <Fragment>\n       <label htmlFor=\"input\">请输入 </label>\n       <input id=\"input\" value={this.state.value} onChange={this.handleValueChange}/>\n        <button onClick={this.handleBtnClick}>添加</button>\n        <ul>\n         {\n           this.state.lists.map((item, index) => {\n             return (\n              <li key={index} onClick={() => this.handleDeleteClick(index)}\n                dangerouslySetInnerHTML={{__html: item}}\n              >\n              </li>\n             )\n           })\n         }\n        </ul>\n     </Fragment>\n    )\n  }\n}\n\nexport default TodoList\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"把列表拆分出去单独作为一个组件-改写代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#把列表拆分出去单独作为一个组件-改写代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 把列表拆分出去单独作为一个组件,改写代码")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("import React ,{Component,Fragment} from 'react'\nimport TodoItem from './TodoItem'\n\nclass TodoList extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      value: '',\n      lists: []\n    }\n  }\n\n  // 输入框改变触发的函数\n  handleValueChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  // 点击添加按钮\n  handleBtnClick = () => {\n    this.setState({\n      lists: [...this.state.lists, this.state.value],\n      value: ''\n    })\n  }\n\n  // 点击删除按钮\n  handleDeleteClick = (index) => {\n    let lists = [...this.state.lists]\n    lists.splice(index, 1)\n    this.setState({\n      lists\n    })\n  }\n\n  render () {\n     return (\n     <Fragment>\n       <label htmlFor=\"input\">请输入 </label>\n       <input id=\"input\" value={this.state.value} onChange={this.handleValueChange}/>\n        <button onClick={this.handleBtnClick}>添加</button>\n        <ul>\n         {\n           this.state.lists.map((item, index) =>(\n            <TodoItem deleteItem={this.handleDeleteClick}\n              index={index} content={item} key={index}\n            />\n           )\n          )\n         }\n        </ul>\n     </Fragment>\n    )\n  }\n}\n\nexport default TodoList\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("import React ,{Component} from 'react';\nclass TodoItem extends Component {\n\n\n  handleDelClick = (index) => {\n    let {deleteItem} = this.props\n    deleteItem(index)\n  }\n\n  render () {\n    let {content, index} = this.props\n    return (\n      <li dangerouslySetInnerHTML={{__html: content}} key={index}\n        onClick={() => this.handleDelClick(index)}\n      ></li>\n    )\n  }\n}\n\nexport default TodoItem;\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ol",[n("li",[this._v("拆分成组件会使代码变的简洁，更加清晰。")]),this._v(" "),n("li",[this._v("父组件向子组件传值，子组件通过如何接收父组件传过来的值(this.props 父组件传过来的值都在这个对象里)")]),this._v(" "),n("li",[this._v("子组件向父组件传值，通过调用父组件传过来的方法，调用父组件的方法传值。")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"优化一下代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化一下代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化一下代码")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("import React ,{Component,Fragment} from 'react'\nimport TodoItem from './TodoItem'\n\nclass TodoList extends Component {\n  constructor (props) {\n    super(props)\n    // 唯一可以分配 this.state 的地方是构造函数。\n    this.state = {\n      value: '',\n      lists: []\n    }\n  }\n\n  // 输入框改变触发的函数\n  handleValueChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  // 点击添加按钮\n  handleBtnClick = () => {\n\n    // this.setState可以接受第二种方式改变值，传递一个函数返回一个对象。\n    this.setState((prevState) => (\n      {\n        lists: [...prevState.lists, prevState.value],\n        value: ''\n      }\n    ))\n  }\n\n  // 点击删除按钮\n  handleDeleteClick = (index) => {\n    console.log('111111111111111:', index)\n    // this.setState可以接受第二种方式改变值，传递一个函数返回一个对象。\n    this.setState((prevState) => {\n      let lists = prevState.lists;\n      lists.splice(index, 1);\n      return {lists}\n    })\n  }\n\n  render () {\n     return (\n     <Fragment>\n       <label htmlFor=\"input\">请输入 </label>\n       <input id=\"input\" value={this.state.value} onChange={this.handleValueChange}/>\n        <button onClick={this.handleBtnClick}>添加</button>\n        <ul>\n         {\n           this.state.lists.map((item, index) =>(\n            <TodoItem deleteItem={this.handleDeleteClick}\n              index={index} content={item} key={index}\n            />\n           ))\n         }\n        </ul>\n     </Fragment>\n    )\n  }\n}\n\nexport default TodoList\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ol",[n("li",[this._v("使用第二种setState的使用方法，传递一个参数返回一个object")])])}],!1,null,null,null);n.default=a.exports}}]);